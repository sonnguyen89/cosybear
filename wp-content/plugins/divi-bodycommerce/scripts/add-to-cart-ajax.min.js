jQuery(function (t) { if (t(".bodycommerce-minicart").prependTo(".shop-cart"), t(".post-type-archive-product").on("click", ".quantity input", function () { return !1 }), t(".archive").on("change input", ".quantity .qty", function () { var a = t(this).parents(".product").find(".add_to_cart_button"); a.data("quantity", t(this).val()), a.attr("href", "?add-to-cart=" + a.attr("data-product_id") + "&quantity=" + t(this).val()) }), t(".input-text.qty.text").bind("keyup mouseup", function () { var a = t(this).val(); t(".product_quantity").val(a) }), "undefined" == typeof wc_add_to_cart_params) return !1; t(document).on("click", ".ajax_add_to_cart", function (a) { a.preventDefault(), a.stopPropagation(); var o = t(this), r = o.closest("form.cart").serializeArray(); if (t(".db_atc_notify_txt").length) { var e = t(".db_atc_notify_txt").val(), i = t(".db_atc_notify_txt_time").val(), c = t(".db_atc_notify_bg_color").val(), n = t(".db_atc_notify_text_color").val(), d = o.text(); o.attr("style", "color:" + n + " !important; background-color:" + c + " !important;"), o.text(e), o.addClass("active"), setTimeout(function () { o.text(d), o.removeClass("active"), o.removeAttr("style") }, i) } var s = t(this).closest(".grouped_form"), _ = t(this).closest(".variations_form"); t(".ajaxerrors").remove(); var l = {}, u = !0; if (variations = _.find("select[name^=attribute]"), variations.length || (variations = _.find("[name^=attribute]:checked")), variations.length || (variations = _.find("input[name^=attribute]")), variations.each(function () { var a, o, r = t(this), e = r.attr("name"), i = r.val(); r.removeClass("error"), 0 === i.length ? (a = e.lastIndexOf("_"), o = e.substring(a + 1), r.addClass("required error").before('<div class="ajaxerrors"><p>Please select ' + o + "</p></div>"), u = !1) : l[e] = i }), !u) return !1; if (!o.is(".ajax_add_to_cart")) return !0; if (o.removeClass("added"), o.addClass("loading"), t(this).parents(".variations_form")[0]) { console.log("variation add to cart"); var p = { action: "bodycommerce_ajax_add_to_cart_woo", product_id: g = _.find("input[name=product_id]").val(), quantity: _.find("input[name=quantity]").val(), variation_id: _.find("input[name=variation_id]").val(), variation: l }; console.log(p); var f = "yes" } else if (t(this).parents(".grouped_form")[0]) { console.log("Grouped add to cart"); var v = s.find("input[name=add-to-cart]").val(), m = {}; s.find(".woocommerce-grouped-product-list-item").each(function () { var a = t(this), o = a.attr("id"), r = a.find(".qty").val(); m[o] = r }); p = { action: "bodycommerce_ajax_add_to_cart_woo_bundle", product_id: v, quantity: "0", grouped_data: m }, f = "no" } else { if (console.log("Single add to cart"), void 0 === (g = t(this).parent().find(".product_id").val())) var g = t(".et_pb_db_atc_0 .button").val(); p = { action: "bodycommerce_ajax_add_to_cart_woo_single", product_id: g, quantity: t(this).parent().find(".qty").val() }, f = "yes" } if (t.each(r, function (t, a) { "add-to-cart" != a.name && (p[a.name] = a.value) }), p.hasOwnProperty("subscribe-to-action-input") && "no" == p["subscribe-to-action-input"] && (p["convert_to_sub_" + g] = "0"), "yes" == f) return t("body").trigger("adding_to_cart", [o, p]), t.post(wc_add_to_cart_params.ajax_url, p, function (a) { if (a) { var r = window.location.toString(); if (r = r.replace("add-to-cart", "added-to-cart"), a.error && a.product_url) window.location = a.product_url; else if ("yes" !== wc_add_to_cart_params.cart_redirect_after_add) { o.removeClass("loading"); var e = a.fragments; a.cart_hash; e && t.each(e, function (a) { t(a).addClass("updating") }), t(".shop_table.cart, .updating, .cart_totals").fadeTo("400", "0.6").block({ message: null, overlayCSS: { opacity: .6 } }), o.addClass("added"), e && t.each(e, function (a, o) { t(a).replaceWith(o) }), t(".widget_shopping_cart, .updating").stop(!0).css("opacity", "1").unblock(), t(".shop_table.cart").load(r + " .shop_table.cart:eq(0) &gt; *", function () { t(".shop_table.cart").stop(!0).css("opacity", "1").unblock(), t(document.body).trigger("cart_page_refreshed") }), t("#bodycommerce_added_to_cart_popup").addClass("active"), t(".cart_totals").load(r + " .cart_totals:eq(0) &gt; *", function () { t(".cart_totals").stop(!0).css("opacity", "1").unblock() }) } else window.location = wc_add_to_cart_params.cart_url } }), !1; jQuery.ajax({ url: ajax_object.ajax_url, data: p, type: "POST", beforeSend: function (t) { }, success: function (a) { if (console.log("sucess!"), p) { var o = a.fragments; a.cart_hash; t(".shop_table.cart, .updating, .cart_totals").fadeTo("400", "0.6").block({ message: null, overlayCSS: { opacity: .6 } }), o && t.each(o, function (a, o) { t(a).replaceWith(o) }), t(".widget_shopping_cart, .updating").stop(!0).css("opacity", "1").unblock(), t(".shop_table.cart").load(this_page + " .shop_table.cart:eq(0) &gt; *", function () { t(".shop_table.cart").stop(!0).css("opacity", "1").unblock(), t(document.body).trigger("cart_page_refreshed") }), t("#bodycommerce_added_to_cart_popup").addClass("active"), t(".cart_totals").load(this_page + " .cart_totals:eq(0) &gt; *", function () { t(".cart_totals").stop(!0).css("opacity", "1").unblock() }) } }, error: function (t, a) { console.log("error!") } }) }) });